
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Product
 */

export type Product = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
  cartName: string
  description: string
  features: string
  cartImage: string
  galleryImageMobile1: string
  galleryImageMobile2: string
  galleryImageMobile3: string
  galleryImageTablet1: string
  galleryImageTablet2: string
  galleryImageTablet3: string
  galleryImageDesktop1: string
  galleryImageDesktop2: string
  galleryImageDesktop3: string
  mainImageMobile: string
  mainImageTablet: string
  mainImageDesktop: string
  price: number
  slug: string
  new: boolean
  categoryId: number
}

/**
 * Model Category
 */

export type Category = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
  image: string
}

/**
 * Model IncludedItem
 */

export type IncludedItem = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
  quantity: number
  productId: number | null
}

/**
 * Model Recommendation
 */

export type Recommendation = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
  imageMobile: string
  imageTablet: string
  imageDesktop: string
  slug: string
  productId: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Products
 * const products = await prisma.product.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Products
   * const products = await prisma.product.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.includedItem`: Exposes CRUD operations for the **IncludedItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IncludedItems
    * const includedItems = await prisma.includedItem.findMany()
    * ```
    */
  get includedItem(): Prisma.IncludedItemDelegate<GlobalReject>;

  /**
   * `prisma.recommendation`: Exposes CRUD operations for the **Recommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendation.findMany()
    * ```
    */
  get recommendation(): Prisma.RecommendationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.25.0
   * Query Engine version: c838e79f39885bc8e1611849b1eb28b5bb5bc922
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Product: 'Product',
    Category: 'Category',
    IncludedItem: 'IncludedItem',
    Recommendation: 'Recommendation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
    max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    categoryId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    categoryId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    cartName: string | null
    description: string | null
    features: string | null
    cartImage: string | null
    galleryImageMobile1: string | null
    galleryImageMobile2: string | null
    galleryImageMobile3: string | null
    galleryImageTablet1: string | null
    galleryImageTablet2: string | null
    galleryImageTablet3: string | null
    galleryImageDesktop1: string | null
    galleryImageDesktop2: string | null
    galleryImageDesktop3: string | null
    mainImageMobile: string | null
    mainImageTablet: string | null
    mainImageDesktop: string | null
    price: number | null
    slug: string | null
    new: boolean | null
    categoryId: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    cartName: string | null
    description: string | null
    features: string | null
    cartImage: string | null
    galleryImageMobile1: string | null
    galleryImageMobile2: string | null
    galleryImageMobile3: string | null
    galleryImageTablet1: string | null
    galleryImageTablet2: string | null
    galleryImageTablet3: string | null
    galleryImageDesktop1: string | null
    galleryImageDesktop2: string | null
    galleryImageDesktop3: string | null
    mainImageMobile: string | null
    mainImageTablet: string | null
    mainImageDesktop: string | null
    price: number | null
    slug: string | null
    new: boolean | null
    categoryId: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    cartName: number
    description: number
    features: number
    cartImage: number
    galleryImageMobile1: number
    galleryImageMobile2: number
    galleryImageMobile3: number
    galleryImageTablet1: number
    galleryImageTablet2: number
    galleryImageTablet3: number
    galleryImageDesktop1: number
    galleryImageDesktop2: number
    galleryImageDesktop3: number
    mainImageMobile: number
    mainImageTablet: number
    mainImageDesktop: number
    price: number
    slug: number
    new: number
    categoryId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    categoryId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    categoryId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    cartName?: true
    description?: true
    features?: true
    cartImage?: true
    galleryImageMobile1?: true
    galleryImageMobile2?: true
    galleryImageMobile3?: true
    galleryImageTablet1?: true
    galleryImageTablet2?: true
    galleryImageTablet3?: true
    galleryImageDesktop1?: true
    galleryImageDesktop2?: true
    galleryImageDesktop3?: true
    mainImageMobile?: true
    mainImageTablet?: true
    mainImageDesktop?: true
    price?: true
    slug?: true
    new?: true
    categoryId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    cartName?: true
    description?: true
    features?: true
    cartImage?: true
    galleryImageMobile1?: true
    galleryImageMobile2?: true
    galleryImageMobile3?: true
    galleryImageTablet1?: true
    galleryImageTablet2?: true
    galleryImageTablet3?: true
    galleryImageDesktop1?: true
    galleryImageDesktop2?: true
    galleryImageDesktop3?: true
    mainImageMobile?: true
    mainImageTablet?: true
    mainImageDesktop?: true
    price?: true
    slug?: true
    new?: true
    categoryId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    cartName?: true
    description?: true
    features?: true
    cartImage?: true
    galleryImageMobile1?: true
    galleryImageMobile2?: true
    galleryImageMobile3?: true
    galleryImageTablet1?: true
    galleryImageTablet2?: true
    galleryImageTablet3?: true
    galleryImageDesktop1?: true
    galleryImageDesktop2?: true
    galleryImageDesktop3?: true
    mainImageMobile?: true
    mainImageTablet?: true
    mainImageDesktop?: true
    price?: true
    slug?: true
    new?: true
    categoryId?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }


    
    
  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByInput>
    by: Array<ProductScalarFieldEnum>
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new: boolean
    categoryId: number
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Promise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ProductGroupByOutputType[P]> 
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      > 
    >


  export type ProductSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    cartName?: boolean
    description?: boolean
    features?: boolean
    cartImage?: boolean
    galleryImageMobile1?: boolean
    galleryImageMobile2?: boolean
    galleryImageMobile3?: boolean
    galleryImageTablet1?: boolean
    galleryImageTablet2?: boolean
    galleryImageTablet3?: boolean
    galleryImageDesktop1?: boolean
    galleryImageDesktop2?: boolean
    galleryImageDesktop3?: boolean
    mainImageMobile?: boolean
    mainImageTablet?: boolean
    mainImageDesktop?: boolean
    price?: boolean
    slug?: boolean
    new?: boolean
    recommendations?: boolean | RecommendationFindManyArgs
    includedItems?: boolean | IncludedItemFindManyArgs
    category?: boolean | CategoryArgs
    categoryId?: boolean
  }

  export type ProductInclude = {
    recommendations?: boolean | RecommendationFindManyArgs
    includedItems?: boolean | IncludedItemFindManyArgs
    category?: boolean | CategoryArgs
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | ProductFindManyArgs
    ?'include' extends U
    ? Product  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'recommendations'
        ? Array < RecommendationGetPayload<S['include'][P]>>  :
        P extends 'includedItems'
        ? Array < IncludedItemGetPayload<S['include'][P]>>  :
        P extends 'category'
        ? CategoryGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Product ?Product [P]
  : 
          P extends 'recommendations'
        ? Array < RecommendationGetPayload<S['select'][P]>>  :
        P extends 'includedItems'
        ? Array < IncludedItemGetPayload<S['select'][P]>>  :
        P extends 'category'
        ? CategoryGetPayload<S['select'][P]> : never
  } 
    : Product
  : Product


  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface ProductDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    recommendations<T extends RecommendationFindManyArgs = {}>(args?: Subset<T, RecommendationFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Recommendation>>, PrismaPromise<Array<RecommendationGetPayload<T>>>>;

    includedItems<T extends IncludedItemFindManyArgs = {}>(args?: Subset<T, IncludedItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<IncludedItem>>, PrismaPromise<Array<IncludedItemGetPayload<T>>>>;

    category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
     * 
    **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
     * 
    **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
     * 
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     * 
    **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    where?: ProductWhereInput
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
    max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    image: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }


    
    
  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    image: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Promise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CategoryGroupByOutputType[P]> 
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      > 
    >


  export type CategorySelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    image?: boolean
    Product?: boolean | ProductFindManyArgs
  }

  export type CategoryInclude = {
    Product?: boolean | ProductFindManyArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Product'
        ? Array < ProductGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Category ?Category [P]
  : 
          P extends 'Product'
        ? Array < ProductGetPayload<S['select'][P]>>  : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Product<T extends ProductFindManyArgs = {}>(args?: Subset<T, ProductFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model IncludedItem
   */


  export type AggregateIncludedItem = {
    _count: IncludedItemCountAggregateOutputType | null
    count: IncludedItemCountAggregateOutputType | null
    _avg: IncludedItemAvgAggregateOutputType | null
    avg: IncludedItemAvgAggregateOutputType | null
    _sum: IncludedItemSumAggregateOutputType | null
    sum: IncludedItemSumAggregateOutputType | null
    _min: IncludedItemMinAggregateOutputType | null
    min: IncludedItemMinAggregateOutputType | null
    _max: IncludedItemMaxAggregateOutputType | null
    max: IncludedItemMaxAggregateOutputType | null
  }

  export type IncludedItemAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    productId: number | null
  }

  export type IncludedItemSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    productId: number | null
  }

  export type IncludedItemMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    quantity: number | null
    productId: number | null
  }

  export type IncludedItemMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    quantity: number | null
    productId: number | null
  }

  export type IncludedItemCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    quantity: number
    productId: number
    _all: number
  }


  export type IncludedItemAvgAggregateInputType = {
    id?: true
    quantity?: true
    productId?: true
  }

  export type IncludedItemSumAggregateInputType = {
    id?: true
    quantity?: true
    productId?: true
  }

  export type IncludedItemMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    quantity?: true
    productId?: true
  }

  export type IncludedItemMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    quantity?: true
    productId?: true
  }

  export type IncludedItemCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    quantity?: true
    productId?: true
    _all?: true
  }

  export type IncludedItemAggregateArgs = {
    /**
     * Filter which IncludedItem to aggregate.
     * 
    **/
    where?: IncludedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncludedItems to fetch.
     * 
    **/
    orderBy?: Enumerable<IncludedItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IncludedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncludedItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncludedItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IncludedItems
    **/
    _count?: true | IncludedItemCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | IncludedItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IncludedItemAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: IncludedItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IncludedItemSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: IncludedItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IncludedItemMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: IncludedItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IncludedItemMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: IncludedItemMaxAggregateInputType
  }

  export type GetIncludedItemAggregateType<T extends IncludedItemAggregateArgs> = {
        [P in keyof T & keyof AggregateIncludedItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIncludedItem[P]>
      : GetScalarType<T[P], AggregateIncludedItem[P]>
  }


    
    
  export type IncludedItemGroupByArgs = {
    where?: IncludedItemWhereInput
    orderBy?: Enumerable<IncludedItemOrderByInput>
    by: Array<IncludedItemScalarFieldEnum>
    having?: IncludedItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IncludedItemCountAggregateInputType | true
    _avg?: IncludedItemAvgAggregateInputType
    _sum?: IncludedItemSumAggregateInputType
    _min?: IncludedItemMinAggregateInputType
    _max?: IncludedItemMaxAggregateInputType
  }


  export type IncludedItemGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    quantity: number
    productId: number | null
    _count: IncludedItemCountAggregateOutputType | null
    _avg: IncludedItemAvgAggregateOutputType | null
    _sum: IncludedItemSumAggregateOutputType | null
    _min: IncludedItemMinAggregateOutputType | null
    _max: IncludedItemMaxAggregateOutputType | null
  }

  type GetIncludedItemGroupByPayload<T extends IncludedItemGroupByArgs> = Promise<
    Array<
      PickArray<IncludedItemGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof IncludedItemGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], IncludedItemGroupByOutputType[P]> 
            : GetScalarType<T[P], IncludedItemGroupByOutputType[P]>
        }
      > 
    >


  export type IncludedItemSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    quantity?: boolean
    Product?: boolean | ProductArgs
    productId?: boolean
  }

  export type IncludedItemInclude = {
    Product?: boolean | ProductArgs
  }

  export type IncludedItemGetPayload<
    S extends boolean | null | undefined | IncludedItemArgs,
    U = keyof S
      > = S extends true
        ? IncludedItem
    : S extends undefined
    ? never
    : S extends IncludedItemArgs | IncludedItemFindManyArgs
    ?'include' extends U
    ? IncludedItem  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Product'
        ? ProductGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof IncludedItem ?IncludedItem [P]
  : 
          P extends 'Product'
        ? ProductGetPayload<S['select'][P]> | null : never
  } 
    : IncludedItem
  : IncludedItem


  type IncludedItemCountArgs = Merge<
    Omit<IncludedItemFindManyArgs, 'select' | 'include'> & {
      select?: IncludedItemCountAggregateInputType | true
    }
  >

  export interface IncludedItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one IncludedItem that matches the filter.
     * @param {IncludedItemFindUniqueArgs} args - Arguments to find a IncludedItem
     * @example
     * // Get one IncludedItem
     * const includedItem = await prisma.includedItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IncludedItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IncludedItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'IncludedItem'> extends True ? CheckSelect<T, Prisma__IncludedItemClient<IncludedItem>, Prisma__IncludedItemClient<IncludedItemGetPayload<T>>> : CheckSelect<T, Prisma__IncludedItemClient<IncludedItem | null >, Prisma__IncludedItemClient<IncludedItemGetPayload<T> | null >>

    /**
     * Find the first IncludedItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncludedItemFindFirstArgs} args - Arguments to find a IncludedItem
     * @example
     * // Get one IncludedItem
     * const includedItem = await prisma.includedItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IncludedItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IncludedItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'IncludedItem'> extends True ? CheckSelect<T, Prisma__IncludedItemClient<IncludedItem>, Prisma__IncludedItemClient<IncludedItemGetPayload<T>>> : CheckSelect<T, Prisma__IncludedItemClient<IncludedItem | null >, Prisma__IncludedItemClient<IncludedItemGetPayload<T> | null >>

    /**
     * Find zero or more IncludedItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncludedItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IncludedItems
     * const includedItems = await prisma.includedItem.findMany()
     * 
     * // Get first 10 IncludedItems
     * const includedItems = await prisma.includedItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const includedItemWithIdOnly = await prisma.includedItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IncludedItemFindManyArgs>(
      args?: SelectSubset<T, IncludedItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<IncludedItem>>, PrismaPromise<Array<IncludedItemGetPayload<T>>>>

    /**
     * Create a IncludedItem.
     * @param {IncludedItemCreateArgs} args - Arguments to create a IncludedItem.
     * @example
     * // Create one IncludedItem
     * const IncludedItem = await prisma.includedItem.create({
     *   data: {
     *     // ... data to create a IncludedItem
     *   }
     * })
     * 
    **/
    create<T extends IncludedItemCreateArgs>(
      args: SelectSubset<T, IncludedItemCreateArgs>
    ): CheckSelect<T, Prisma__IncludedItemClient<IncludedItem>, Prisma__IncludedItemClient<IncludedItemGetPayload<T>>>

    /**
     * Create many IncludedItems.
     *     @param {IncludedItemCreateManyArgs} args - Arguments to create many IncludedItems.
     *     @example
     *     // Create many IncludedItems
     *     const includedItem = await prisma.includedItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IncludedItemCreateManyArgs>(
      args?: SelectSubset<T, IncludedItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a IncludedItem.
     * @param {IncludedItemDeleteArgs} args - Arguments to delete one IncludedItem.
     * @example
     * // Delete one IncludedItem
     * const IncludedItem = await prisma.includedItem.delete({
     *   where: {
     *     // ... filter to delete one IncludedItem
     *   }
     * })
     * 
    **/
    delete<T extends IncludedItemDeleteArgs>(
      args: SelectSubset<T, IncludedItemDeleteArgs>
    ): CheckSelect<T, Prisma__IncludedItemClient<IncludedItem>, Prisma__IncludedItemClient<IncludedItemGetPayload<T>>>

    /**
     * Update one IncludedItem.
     * @param {IncludedItemUpdateArgs} args - Arguments to update one IncludedItem.
     * @example
     * // Update one IncludedItem
     * const includedItem = await prisma.includedItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IncludedItemUpdateArgs>(
      args: SelectSubset<T, IncludedItemUpdateArgs>
    ): CheckSelect<T, Prisma__IncludedItemClient<IncludedItem>, Prisma__IncludedItemClient<IncludedItemGetPayload<T>>>

    /**
     * Delete zero or more IncludedItems.
     * @param {IncludedItemDeleteManyArgs} args - Arguments to filter IncludedItems to delete.
     * @example
     * // Delete a few IncludedItems
     * const { count } = await prisma.includedItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IncludedItemDeleteManyArgs>(
      args?: SelectSubset<T, IncludedItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more IncludedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncludedItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IncludedItems
     * const includedItem = await prisma.includedItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IncludedItemUpdateManyArgs>(
      args: SelectSubset<T, IncludedItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one IncludedItem.
     * @param {IncludedItemUpsertArgs} args - Arguments to update or create a IncludedItem.
     * @example
     * // Update or create a IncludedItem
     * const includedItem = await prisma.includedItem.upsert({
     *   create: {
     *     // ... data to create a IncludedItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IncludedItem we want to update
     *   }
     * })
    **/
    upsert<T extends IncludedItemUpsertArgs>(
      args: SelectSubset<T, IncludedItemUpsertArgs>
    ): CheckSelect<T, Prisma__IncludedItemClient<IncludedItem>, Prisma__IncludedItemClient<IncludedItemGetPayload<T>>>

    /**
     * Count the number of IncludedItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncludedItemCountArgs} args - Arguments to filter IncludedItems to count.
     * @example
     * // Count the number of IncludedItems
     * const count = await prisma.includedItem.count({
     *   where: {
     *     // ... the filter for the IncludedItems we want to count
     *   }
     * })
    **/
    count<T extends IncludedItemCountArgs>(
      args?: Subset<T, IncludedItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IncludedItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IncludedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncludedItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IncludedItemAggregateArgs>(args: Subset<T, IncludedItemAggregateArgs>): PrismaPromise<GetIncludedItemAggregateType<T>>

    /**
     * Group by IncludedItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IncludedItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IncludedItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IncludedItemGroupByArgs['orderBy'] }
        : { orderBy?: IncludedItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IncludedItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIncludedItemGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for IncludedItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IncludedItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * IncludedItem findUnique
   */
  export type IncludedItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
    /**
     * Throw an Error if a IncludedItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which IncludedItem to fetch.
     * 
    **/
    where: IncludedItemWhereUniqueInput
  }


  /**
   * IncludedItem findFirst
   */
  export type IncludedItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
    /**
     * Throw an Error if a IncludedItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which IncludedItem to fetch.
     * 
    **/
    where?: IncludedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncludedItems to fetch.
     * 
    **/
    orderBy?: Enumerable<IncludedItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IncludedItems.
     * 
    **/
    cursor?: IncludedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncludedItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncludedItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IncludedItems.
     * 
    **/
    distinct?: Enumerable<IncludedItemScalarFieldEnum>
  }


  /**
   * IncludedItem findMany
   */
  export type IncludedItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
    /**
     * Filter, which IncludedItems to fetch.
     * 
    **/
    where?: IncludedItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IncludedItems to fetch.
     * 
    **/
    orderBy?: Enumerable<IncludedItemOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IncludedItems.
     * 
    **/
    cursor?: IncludedItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IncludedItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IncludedItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IncludedItemScalarFieldEnum>
  }


  /**
   * IncludedItem create
   */
  export type IncludedItemCreateArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
    /**
     * The data needed to create a IncludedItem.
     * 
    **/
    data: XOR<IncludedItemCreateInput, IncludedItemUncheckedCreateInput>
  }


  /**
   * IncludedItem createMany
   */
  export type IncludedItemCreateManyArgs = {
    data: Enumerable<IncludedItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * IncludedItem update
   */
  export type IncludedItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
    /**
     * The data needed to update a IncludedItem.
     * 
    **/
    data: XOR<IncludedItemUpdateInput, IncludedItemUncheckedUpdateInput>
    /**
     * Choose, which IncludedItem to update.
     * 
    **/
    where: IncludedItemWhereUniqueInput
  }


  /**
   * IncludedItem updateMany
   */
  export type IncludedItemUpdateManyArgs = {
    data: XOR<IncludedItemUpdateManyMutationInput, IncludedItemUncheckedUpdateManyInput>
    where?: IncludedItemWhereInput
  }


  /**
   * IncludedItem upsert
   */
  export type IncludedItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
    /**
     * The filter to search for the IncludedItem to update in case it exists.
     * 
    **/
    where: IncludedItemWhereUniqueInput
    /**
     * In case the IncludedItem found by the `where` argument doesn't exist, create a new IncludedItem with this data.
     * 
    **/
    create: XOR<IncludedItemCreateInput, IncludedItemUncheckedCreateInput>
    /**
     * In case the IncludedItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IncludedItemUpdateInput, IncludedItemUncheckedUpdateInput>
  }


  /**
   * IncludedItem delete
   */
  export type IncludedItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
    /**
     * Filter which IncludedItem to delete.
     * 
    **/
    where: IncludedItemWhereUniqueInput
  }


  /**
   * IncludedItem deleteMany
   */
  export type IncludedItemDeleteManyArgs = {
    where?: IncludedItemWhereInput
  }


  /**
   * IncludedItem without action
   */
  export type IncludedItemArgs = {
    /**
     * Select specific fields to fetch from the IncludedItem
     * 
    **/
    select?: IncludedItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IncludedItemInclude | null
  }



  /**
   * Model Recommendation
   */


  export type AggregateRecommendation = {
    _count: RecommendationCountAggregateOutputType | null
    count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
    max: RecommendationMaxAggregateOutputType | null
  }

  export type RecommendationAvgAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type RecommendationSumAggregateOutputType = {
    id: number | null
    productId: number | null
  }

  export type RecommendationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    imageMobile: string | null
    imageTablet: string | null
    imageDesktop: string | null
    slug: string | null
    productId: number | null
  }

  export type RecommendationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    imageMobile: string | null
    imageTablet: string | null
    imageDesktop: string | null
    slug: string | null
    productId: number | null
  }

  export type RecommendationCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    imageMobile: number
    imageTablet: number
    imageDesktop: number
    slug: number
    productId: number
    _all: number
  }


  export type RecommendationAvgAggregateInputType = {
    id?: true
    productId?: true
  }

  export type RecommendationSumAggregateInputType = {
    id?: true
    productId?: true
  }

  export type RecommendationMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    imageMobile?: true
    imageTablet?: true
    imageDesktop?: true
    slug?: true
    productId?: true
  }

  export type RecommendationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    imageMobile?: true
    imageTablet?: true
    imageDesktop?: true
    slug?: true
    productId?: true
  }

  export type RecommendationCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    imageMobile?: true
    imageTablet?: true
    imageDesktop?: true
    slug?: true
    productId?: true
    _all?: true
  }

  export type RecommendationAggregateArgs = {
    /**
     * Filter which Recommendation to aggregate.
     * 
    **/
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     * 
    **/
    orderBy?: Enumerable<RecommendationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recommendations
    **/
    _count?: true | RecommendationCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | RecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendationAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: RecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendationSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: RecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: RecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: RecommendationMaxAggregateInputType
  }

  export type GetRecommendationAggregateType<T extends RecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendation[P]>
      : GetScalarType<T[P], AggregateRecommendation[P]>
  }


    
    
  export type RecommendationGroupByArgs = {
    where?: RecommendationWhereInput
    orderBy?: Enumerable<RecommendationOrderByInput>
    by: Array<RecommendationScalarFieldEnum>
    having?: RecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationCountAggregateInputType | true
    _avg?: RecommendationAvgAggregateInputType
    _sum?: RecommendationSumAggregateInputType
    _min?: RecommendationMinAggregateInputType
    _max?: RecommendationMaxAggregateInputType
  }


  export type RecommendationGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    imageMobile: string
    imageTablet: string
    imageDesktop: string
    slug: string
    productId: number | null
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  type GetRecommendationGroupByPayload<T extends RecommendationGroupByArgs> = Promise<
    Array<
      PickArray<RecommendationGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof RecommendationGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], RecommendationGroupByOutputType[P]> 
            : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
        }
      > 
    >


  export type RecommendationSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    imageMobile?: boolean
    imageTablet?: boolean
    imageDesktop?: boolean
    slug?: boolean
    Product?: boolean | ProductArgs
    productId?: boolean
  }

  export type RecommendationInclude = {
    Product?: boolean | ProductArgs
  }

  export type RecommendationGetPayload<
    S extends boolean | null | undefined | RecommendationArgs,
    U = keyof S
      > = S extends true
        ? Recommendation
    : S extends undefined
    ? never
    : S extends RecommendationArgs | RecommendationFindManyArgs
    ?'include' extends U
    ? Recommendation  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Product'
        ? ProductGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Recommendation ?Recommendation [P]
  : 
          P extends 'Product'
        ? ProductGetPayload<S['select'][P]> | null : never
  } 
    : Recommendation
  : Recommendation


  type RecommendationCountArgs = Merge<
    Omit<RecommendationFindManyArgs, 'select' | 'include'> & {
      select?: RecommendationCountAggregateInputType | true
    }
  >

  export interface RecommendationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Recommendation that matches the filter.
     * @param {RecommendationFindUniqueArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecommendationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RecommendationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recommendation'> extends True ? CheckSelect<T, Prisma__RecommendationClient<Recommendation>, Prisma__RecommendationClient<RecommendationGetPayload<T>>> : CheckSelect<T, Prisma__RecommendationClient<Recommendation | null >, Prisma__RecommendationClient<RecommendationGetPayload<T> | null >>

    /**
     * Find the first Recommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecommendationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RecommendationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recommendation'> extends True ? CheckSelect<T, Prisma__RecommendationClient<Recommendation>, Prisma__RecommendationClient<RecommendationGetPayload<T>>> : CheckSelect<T, Prisma__RecommendationClient<Recommendation | null >, Prisma__RecommendationClient<RecommendationGetPayload<T> | null >>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendation.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecommendationFindManyArgs>(
      args?: SelectSubset<T, RecommendationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Recommendation>>, PrismaPromise<Array<RecommendationGetPayload<T>>>>

    /**
     * Create a Recommendation.
     * @param {RecommendationCreateArgs} args - Arguments to create a Recommendation.
     * @example
     * // Create one Recommendation
     * const Recommendation = await prisma.recommendation.create({
     *   data: {
     *     // ... data to create a Recommendation
     *   }
     * })
     * 
    **/
    create<T extends RecommendationCreateArgs>(
      args: SelectSubset<T, RecommendationCreateArgs>
    ): CheckSelect<T, Prisma__RecommendationClient<Recommendation>, Prisma__RecommendationClient<RecommendationGetPayload<T>>>

    /**
     * Create many Recommendations.
     *     @param {RecommendationCreateManyArgs} args - Arguments to create many Recommendations.
     *     @example
     *     // Create many Recommendations
     *     const recommendation = await prisma.recommendation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecommendationCreateManyArgs>(
      args?: SelectSubset<T, RecommendationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Recommendation.
     * @param {RecommendationDeleteArgs} args - Arguments to delete one Recommendation.
     * @example
     * // Delete one Recommendation
     * const Recommendation = await prisma.recommendation.delete({
     *   where: {
     *     // ... filter to delete one Recommendation
     *   }
     * })
     * 
    **/
    delete<T extends RecommendationDeleteArgs>(
      args: SelectSubset<T, RecommendationDeleteArgs>
    ): CheckSelect<T, Prisma__RecommendationClient<Recommendation>, Prisma__RecommendationClient<RecommendationGetPayload<T>>>

    /**
     * Update one Recommendation.
     * @param {RecommendationUpdateArgs} args - Arguments to update one Recommendation.
     * @example
     * // Update one Recommendation
     * const recommendation = await prisma.recommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecommendationUpdateArgs>(
      args: SelectSubset<T, RecommendationUpdateArgs>
    ): CheckSelect<T, Prisma__RecommendationClient<Recommendation>, Prisma__RecommendationClient<RecommendationGetPayload<T>>>

    /**
     * Delete zero or more Recommendations.
     * @param {RecommendationDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecommendationDeleteManyArgs>(
      args?: SelectSubset<T, RecommendationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecommendationUpdateManyArgs>(
      args: SelectSubset<T, RecommendationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Recommendation.
     * @param {RecommendationUpsertArgs} args - Arguments to update or create a Recommendation.
     * @example
     * // Update or create a Recommendation
     * const recommendation = await prisma.recommendation.upsert({
     *   create: {
     *     // ... data to create a Recommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendation we want to update
     *   }
     * })
    **/
    upsert<T extends RecommendationUpsertArgs>(
      args: SelectSubset<T, RecommendationUpsertArgs>
    ): CheckSelect<T, Prisma__RecommendationClient<Recommendation>, Prisma__RecommendationClient<RecommendationGetPayload<T>>>

    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendation.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends RecommendationCountArgs>(
      args?: Subset<T, RecommendationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationAggregateArgs>(args: Subset<T, RecommendationAggregateArgs>): PrismaPromise<GetRecommendationAggregateType<T>>

    /**
     * Group by Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecommendationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Product<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Recommendation findUnique
   */
  export type RecommendationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
    /**
     * Throw an Error if a Recommendation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Recommendation to fetch.
     * 
    **/
    where: RecommendationWhereUniqueInput
  }


  /**
   * Recommendation findFirst
   */
  export type RecommendationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
    /**
     * Throw an Error if a Recommendation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Recommendation to fetch.
     * 
    **/
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     * 
    **/
    orderBy?: Enumerable<RecommendationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     * 
    **/
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     * 
    **/
    distinct?: Enumerable<RecommendationScalarFieldEnum>
  }


  /**
   * Recommendation findMany
   */
  export type RecommendationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
    /**
     * Filter, which Recommendations to fetch.
     * 
    **/
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     * 
    **/
    orderBy?: Enumerable<RecommendationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recommendations.
     * 
    **/
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RecommendationScalarFieldEnum>
  }


  /**
   * Recommendation create
   */
  export type RecommendationCreateArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
    /**
     * The data needed to create a Recommendation.
     * 
    **/
    data: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
  }


  /**
   * Recommendation createMany
   */
  export type RecommendationCreateManyArgs = {
    data: Enumerable<RecommendationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Recommendation update
   */
  export type RecommendationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
    /**
     * The data needed to update a Recommendation.
     * 
    **/
    data: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
    /**
     * Choose, which Recommendation to update.
     * 
    **/
    where: RecommendationWhereUniqueInput
  }


  /**
   * Recommendation updateMany
   */
  export type RecommendationUpdateManyArgs = {
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    where?: RecommendationWhereInput
  }


  /**
   * Recommendation upsert
   */
  export type RecommendationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
    /**
     * The filter to search for the Recommendation to update in case it exists.
     * 
    **/
    where: RecommendationWhereUniqueInput
    /**
     * In case the Recommendation found by the `where` argument doesn't exist, create a new Recommendation with this data.
     * 
    **/
    create: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
    /**
     * In case the Recommendation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
  }


  /**
   * Recommendation delete
   */
  export type RecommendationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
    /**
     * Filter which Recommendation to delete.
     * 
    **/
    where: RecommendationWhereUniqueInput
  }


  /**
   * Recommendation deleteMany
   */
  export type RecommendationDeleteManyArgs = {
    where?: RecommendationWhereInput
  }


  /**
   * Recommendation without action
   */
  export type RecommendationArgs = {
    /**
     * Select specific fields to fetch from the Recommendation
     * 
    **/
    select?: RecommendationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RecommendationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ProductScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    cartName: 'cartName',
    description: 'description',
    features: 'features',
    cartImage: 'cartImage',
    galleryImageMobile1: 'galleryImageMobile1',
    galleryImageMobile2: 'galleryImageMobile2',
    galleryImageMobile3: 'galleryImageMobile3',
    galleryImageTablet1: 'galleryImageTablet1',
    galleryImageTablet2: 'galleryImageTablet2',
    galleryImageTablet3: 'galleryImageTablet3',
    galleryImageDesktop1: 'galleryImageDesktop1',
    galleryImageDesktop2: 'galleryImageDesktop2',
    galleryImageDesktop3: 'galleryImageDesktop3',
    mainImageMobile: 'mainImageMobile',
    mainImageTablet: 'mainImageTablet',
    mainImageDesktop: 'mainImageDesktop',
    price: 'price',
    slug: 'slug',
    new: 'new',
    categoryId: 'categoryId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    image: 'image'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const IncludedItemScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    quantity: 'quantity',
    productId: 'productId'
  };

  export type IncludedItemScalarFieldEnum = (typeof IncludedItemScalarFieldEnum)[keyof typeof IncludedItemScalarFieldEnum]


  export const RecommendationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    imageMobile: 'imageMobile',
    imageTablet: 'imageTablet',
    imageDesktop: 'imageDesktop',
    slug: 'slug',
    productId: 'productId'
  };

  export type RecommendationScalarFieldEnum = (typeof RecommendationScalarFieldEnum)[keyof typeof RecommendationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    cartName?: StringFilter | string
    description?: StringFilter | string
    features?: StringFilter | string
    cartImage?: StringFilter | string
    galleryImageMobile1?: StringFilter | string
    galleryImageMobile2?: StringFilter | string
    galleryImageMobile3?: StringFilter | string
    galleryImageTablet1?: StringFilter | string
    galleryImageTablet2?: StringFilter | string
    galleryImageTablet3?: StringFilter | string
    galleryImageDesktop1?: StringFilter | string
    galleryImageDesktop2?: StringFilter | string
    galleryImageDesktop3?: StringFilter | string
    mainImageMobile?: StringFilter | string
    mainImageTablet?: StringFilter | string
    mainImageDesktop?: StringFilter | string
    price?: IntFilter | number
    slug?: StringFilter | string
    new?: BoolFilter | boolean
    recommendations?: RecommendationListRelationFilter
    includedItems?: IncludedItemListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    categoryId?: IntFilter | number
  }

  export type ProductOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    cartName?: SortOrder
    description?: SortOrder
    features?: SortOrder
    cartImage?: SortOrder
    galleryImageMobile1?: SortOrder
    galleryImageMobile2?: SortOrder
    galleryImageMobile3?: SortOrder
    galleryImageTablet1?: SortOrder
    galleryImageTablet2?: SortOrder
    galleryImageTablet3?: SortOrder
    galleryImageDesktop1?: SortOrder
    galleryImageDesktop2?: SortOrder
    galleryImageDesktop3?: SortOrder
    mainImageMobile?: SortOrder
    mainImageTablet?: SortOrder
    mainImageDesktop?: SortOrder
    price?: SortOrder
    slug?: SortOrder
    new?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductWhereUniqueInput = {
    id?: number
    slug?: string
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    cartName?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    features?: StringWithAggregatesFilter | string
    cartImage?: StringWithAggregatesFilter | string
    galleryImageMobile1?: StringWithAggregatesFilter | string
    galleryImageMobile2?: StringWithAggregatesFilter | string
    galleryImageMobile3?: StringWithAggregatesFilter | string
    galleryImageTablet1?: StringWithAggregatesFilter | string
    galleryImageTablet2?: StringWithAggregatesFilter | string
    galleryImageTablet3?: StringWithAggregatesFilter | string
    galleryImageDesktop1?: StringWithAggregatesFilter | string
    galleryImageDesktop2?: StringWithAggregatesFilter | string
    galleryImageDesktop3?: StringWithAggregatesFilter | string
    mainImageMobile?: StringWithAggregatesFilter | string
    mainImageTablet?: StringWithAggregatesFilter | string
    mainImageDesktop?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    slug?: StringWithAggregatesFilter | string
    new?: BoolWithAggregatesFilter | boolean
    categoryId?: IntWithAggregatesFilter | number
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    image?: StringFilter | string
    Product?: ProductListRelationFilter
  }

  export type CategoryOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
  }

  export type IncludedItemWhereInput = {
    AND?: Enumerable<IncludedItemWhereInput>
    OR?: Enumerable<IncludedItemWhereInput>
    NOT?: Enumerable<IncludedItemWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    quantity?: IntFilter | number
    Product?: XOR<ProductRelationFilter, ProductWhereInput> | null
    productId?: IntNullableFilter | number | null
  }

  export type IncludedItemOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
  }

  export type IncludedItemWhereUniqueInput = {
    id?: number
  }

  export type IncludedItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IncludedItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<IncludedItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IncludedItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    quantity?: IntWithAggregatesFilter | number
    productId?: IntNullableWithAggregatesFilter | number | null
  }

  export type RecommendationWhereInput = {
    AND?: Enumerable<RecommendationWhereInput>
    OR?: Enumerable<RecommendationWhereInput>
    NOT?: Enumerable<RecommendationWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    imageMobile?: StringFilter | string
    imageTablet?: StringFilter | string
    imageDesktop?: StringFilter | string
    slug?: StringFilter | string
    Product?: XOR<ProductRelationFilter, ProductWhereInput> | null
    productId?: IntNullableFilter | number | null
  }

  export type RecommendationOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    imageMobile?: SortOrder
    imageTablet?: SortOrder
    imageDesktop?: SortOrder
    slug?: SortOrder
    productId?: SortOrder
  }

  export type RecommendationWhereUniqueInput = {
    id?: number
  }

  export type RecommendationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RecommendationScalarWhereWithAggregatesInput>
    OR?: Enumerable<RecommendationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RecommendationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    imageMobile?: StringWithAggregatesFilter | string
    imageTablet?: StringWithAggregatesFilter | string
    imageDesktop?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    productId?: IntNullableWithAggregatesFilter | number | null
  }

  export type ProductCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    recommendations?: RecommendationCreateNestedManyWithoutProductInput
    includedItems?: IncludedItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    categoryId: number
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutProductInput
    includedItems?: IncludedItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    recommendations?: RecommendationUpdateManyWithoutProductInput
    includedItems?: IncludedItemUpdateManyWithoutProductInput
    category?: CategoryUpdateOneRequiredWithoutProductInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    recommendations?: RecommendationUncheckedUpdateManyWithoutProductInput
    includedItems?: IncludedItemUncheckedUpdateManyWithoutProductInput
  }

  export type ProductCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    categoryId: number
  }

  export type ProductUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
    Product?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
    Product?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateManyWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    Product?: ProductUncheckedUpdateManyWithoutCategoryInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
  }

  export type CategoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type IncludedItemCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    quantity: number
    Product?: ProductCreateNestedOneWithoutIncludedItemsInput
  }

  export type IncludedItemUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    quantity: number
    productId?: number | null
  }

  export type IncludedItemUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    Product?: ProductUpdateOneWithoutIncludedItemsInput
  }

  export type IncludedItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IncludedItemCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    quantity: number
    productId?: number | null
  }

  export type IncludedItemUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type IncludedItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RecommendationCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    imageMobile: string
    imageTablet: string
    imageDesktop: string
    slug: string
    Product?: ProductCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    imageMobile: string
    imageTablet: string
    imageDesktop: string
    slug: string
    productId?: number | null
  }

  export type RecommendationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    imageMobile?: StringFieldUpdateOperationsInput | string
    imageTablet?: StringFieldUpdateOperationsInput | string
    imageDesktop?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    Product?: ProductUpdateOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    imageMobile?: StringFieldUpdateOperationsInput | string
    imageTablet?: StringFieldUpdateOperationsInput | string
    imageDesktop?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RecommendationCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    imageMobile: string
    imageTablet: string
    imageDesktop: string
    slug: string
    productId?: number | null
  }

  export type RecommendationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    imageMobile?: StringFieldUpdateOperationsInput | string
    imageTablet?: StringFieldUpdateOperationsInput | string
    imageDesktop?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    imageMobile?: StringFieldUpdateOperationsInput | string
    imageTablet?: StringFieldUpdateOperationsInput | string
    imageDesktop?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type RecommendationListRelationFilter = {
    every?: RecommendationWhereInput
    some?: RecommendationWhereInput
    none?: RecommendationWhereInput
  }

  export type IncludedItemListRelationFilter = {
    every?: IncludedItemWhereInput
    some?: IncludedItemWhereInput
    none?: IncludedItemWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type RecommendationCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<RecommendationCreateWithoutProductInput>, Enumerable<RecommendationUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<RecommendationCreateOrConnectWithoutProductInput>
    createMany?: RecommendationCreateManyProductInputEnvelope
    connect?: Enumerable<RecommendationWhereUniqueInput>
  }

  export type IncludedItemCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<IncludedItemCreateWithoutProductInput>, Enumerable<IncludedItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<IncludedItemCreateOrConnectWithoutProductInput>
    createMany?: IncludedItemCreateManyProductInputEnvelope
    connect?: Enumerable<IncludedItemWhereUniqueInput>
  }

  export type CategoryCreateNestedOneWithoutProductInput = {
    create?: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductInput
    connect?: CategoryWhereUniqueInput
  }

  export type RecommendationUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<RecommendationCreateWithoutProductInput>, Enumerable<RecommendationUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<RecommendationCreateOrConnectWithoutProductInput>
    createMany?: RecommendationCreateManyProductInputEnvelope
    connect?: Enumerable<RecommendationWhereUniqueInput>
  }

  export type IncludedItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<IncludedItemCreateWithoutProductInput>, Enumerable<IncludedItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<IncludedItemCreateOrConnectWithoutProductInput>
    createMany?: IncludedItemCreateManyProductInputEnvelope
    connect?: Enumerable<IncludedItemWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RecommendationUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<RecommendationCreateWithoutProductInput>, Enumerable<RecommendationUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<RecommendationCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<RecommendationUpsertWithWhereUniqueWithoutProductInput>
    createMany?: RecommendationCreateManyProductInputEnvelope
    connect?: Enumerable<RecommendationWhereUniqueInput>
    set?: Enumerable<RecommendationWhereUniqueInput>
    disconnect?: Enumerable<RecommendationWhereUniqueInput>
    delete?: Enumerable<RecommendationWhereUniqueInput>
    update?: Enumerable<RecommendationUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<RecommendationUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<RecommendationScalarWhereInput>
  }

  export type IncludedItemUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<IncludedItemCreateWithoutProductInput>, Enumerable<IncludedItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<IncludedItemCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<IncludedItemUpsertWithWhereUniqueWithoutProductInput>
    createMany?: IncludedItemCreateManyProductInputEnvelope
    connect?: Enumerable<IncludedItemWhereUniqueInput>
    set?: Enumerable<IncludedItemWhereUniqueInput>
    disconnect?: Enumerable<IncludedItemWhereUniqueInput>
    delete?: Enumerable<IncludedItemWhereUniqueInput>
    update?: Enumerable<IncludedItemUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<IncludedItemUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<IncludedItemScalarWhereInput>
  }

  export type CategoryUpdateOneRequiredWithoutProductInput = {
    create?: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductInput
    upsert?: CategoryUpsertWithoutProductInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutProductInput, CategoryUncheckedUpdateWithoutProductInput>
  }

  export type RecommendationUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<RecommendationCreateWithoutProductInput>, Enumerable<RecommendationUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<RecommendationCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<RecommendationUpsertWithWhereUniqueWithoutProductInput>
    createMany?: RecommendationCreateManyProductInputEnvelope
    connect?: Enumerable<RecommendationWhereUniqueInput>
    set?: Enumerable<RecommendationWhereUniqueInput>
    disconnect?: Enumerable<RecommendationWhereUniqueInput>
    delete?: Enumerable<RecommendationWhereUniqueInput>
    update?: Enumerable<RecommendationUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<RecommendationUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<RecommendationScalarWhereInput>
  }

  export type IncludedItemUncheckedUpdateManyWithoutProductInput = {
    create?: XOR<Enumerable<IncludedItemCreateWithoutProductInput>, Enumerable<IncludedItemUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<IncludedItemCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<IncludedItemUpsertWithWhereUniqueWithoutProductInput>
    createMany?: IncludedItemCreateManyProductInputEnvelope
    connect?: Enumerable<IncludedItemWhereUniqueInput>
    set?: Enumerable<IncludedItemWhereUniqueInput>
    disconnect?: Enumerable<IncludedItemWhereUniqueInput>
    delete?: Enumerable<IncludedItemWhereUniqueInput>
    update?: Enumerable<IncludedItemUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<IncludedItemUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<IncludedItemScalarWhereInput>
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoryInput>, Enumerable<ProductUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoryInput>, Enumerable<ProductUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type ProductUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoryInput>, Enumerable<ProductUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoryInput>, Enumerable<ProductUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type ProductCreateNestedOneWithoutIncludedItemsInput = {
    create?: XOR<ProductCreateWithoutIncludedItemsInput, ProductUncheckedCreateWithoutIncludedItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutIncludedItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneWithoutIncludedItemsInput = {
    create?: XOR<ProductCreateWithoutIncludedItemsInput, ProductUncheckedCreateWithoutIncludedItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutIncludedItemsInput
    upsert?: ProductUpsertWithoutIncludedItemsInput
    connect?: ProductWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ProductUpdateWithoutIncludedItemsInput, ProductUncheckedUpdateWithoutIncludedItemsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<ProductCreateWithoutRecommendationsInput, ProductUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRecommendationsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneWithoutRecommendationsInput = {
    create?: XOR<ProductCreateWithoutRecommendationsInput, ProductUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRecommendationsInput
    upsert?: ProductUpsertWithoutRecommendationsInput
    connect?: ProductWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ProductUpdateWithoutRecommendationsInput, ProductUncheckedUpdateWithoutRecommendationsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type RecommendationCreateWithoutProductInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    imageMobile: string
    imageTablet: string
    imageDesktop: string
    slug: string
  }

  export type RecommendationUncheckedCreateWithoutProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    imageMobile: string
    imageTablet: string
    imageDesktop: string
    slug: string
  }

  export type RecommendationCreateOrConnectWithoutProductInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutProductInput, RecommendationUncheckedCreateWithoutProductInput>
  }

  export type RecommendationCreateManyProductInputEnvelope = {
    data: Enumerable<RecommendationCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type IncludedItemCreateWithoutProductInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    quantity: number
  }

  export type IncludedItemUncheckedCreateWithoutProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    quantity: number
  }

  export type IncludedItemCreateOrConnectWithoutProductInput = {
    where: IncludedItemWhereUniqueInput
    create: XOR<IncludedItemCreateWithoutProductInput, IncludedItemUncheckedCreateWithoutProductInput>
  }

  export type IncludedItemCreateManyProductInputEnvelope = {
    data: Enumerable<IncludedItemCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutProductInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
  }

  export type CategoryUncheckedCreateWithoutProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
  }

  export type CategoryCreateOrConnectWithoutProductInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
  }

  export type RecommendationUpsertWithWhereUniqueWithoutProductInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutProductInput, RecommendationUncheckedUpdateWithoutProductInput>
    create: XOR<RecommendationCreateWithoutProductInput, RecommendationUncheckedCreateWithoutProductInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutProductInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutProductInput, RecommendationUncheckedUpdateWithoutProductInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutProductInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutRecommendationsInput>
  }

  export type RecommendationScalarWhereInput = {
    AND?: Enumerable<RecommendationScalarWhereInput>
    OR?: Enumerable<RecommendationScalarWhereInput>
    NOT?: Enumerable<RecommendationScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    imageMobile?: StringFilter | string
    imageTablet?: StringFilter | string
    imageDesktop?: StringFilter | string
    slug?: StringFilter | string
    productId?: IntNullableFilter | number | null
  }

  export type IncludedItemUpsertWithWhereUniqueWithoutProductInput = {
    where: IncludedItemWhereUniqueInput
    update: XOR<IncludedItemUpdateWithoutProductInput, IncludedItemUncheckedUpdateWithoutProductInput>
    create: XOR<IncludedItemCreateWithoutProductInput, IncludedItemUncheckedCreateWithoutProductInput>
  }

  export type IncludedItemUpdateWithWhereUniqueWithoutProductInput = {
    where: IncludedItemWhereUniqueInput
    data: XOR<IncludedItemUpdateWithoutProductInput, IncludedItemUncheckedUpdateWithoutProductInput>
  }

  export type IncludedItemUpdateManyWithWhereWithoutProductInput = {
    where: IncludedItemScalarWhereInput
    data: XOR<IncludedItemUpdateManyMutationInput, IncludedItemUncheckedUpdateManyWithoutIncludedItemsInput>
  }

  export type IncludedItemScalarWhereInput = {
    AND?: Enumerable<IncludedItemScalarWhereInput>
    OR?: Enumerable<IncludedItemScalarWhereInput>
    NOT?: Enumerable<IncludedItemScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    quantity?: IntFilter | number
    productId?: IntNullableFilter | number | null
  }

  export type CategoryUpsertWithoutProductInput = {
    update: XOR<CategoryUpdateWithoutProductInput, CategoryUncheckedUpdateWithoutProductInput>
    create: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
  }

  export type CategoryUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateWithoutCategoryInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    recommendations?: RecommendationCreateNestedManyWithoutProductInput
    includedItems?: IncludedItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutProductInput
    includedItems?: IncludedItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: Enumerable<ProductCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    cartName?: StringFilter | string
    description?: StringFilter | string
    features?: StringFilter | string
    cartImage?: StringFilter | string
    galleryImageMobile1?: StringFilter | string
    galleryImageMobile2?: StringFilter | string
    galleryImageMobile3?: StringFilter | string
    galleryImageTablet1?: StringFilter | string
    galleryImageTablet2?: StringFilter | string
    galleryImageTablet3?: StringFilter | string
    galleryImageDesktop1?: StringFilter | string
    galleryImageDesktop2?: StringFilter | string
    galleryImageDesktop3?: StringFilter | string
    mainImageMobile?: StringFilter | string
    mainImageTablet?: StringFilter | string
    mainImageDesktop?: StringFilter | string
    price?: IntFilter | number
    slug?: StringFilter | string
    new?: BoolFilter | boolean
    categoryId?: IntFilter | number
  }

  export type ProductCreateWithoutIncludedItemsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    recommendations?: RecommendationCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutIncludedItemsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    categoryId: number
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutIncludedItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutIncludedItemsInput, ProductUncheckedCreateWithoutIncludedItemsInput>
  }

  export type ProductUpsertWithoutIncludedItemsInput = {
    update: XOR<ProductUpdateWithoutIncludedItemsInput, ProductUncheckedUpdateWithoutIncludedItemsInput>
    create: XOR<ProductCreateWithoutIncludedItemsInput, ProductUncheckedCreateWithoutIncludedItemsInput>
  }

  export type ProductUpdateWithoutIncludedItemsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    recommendations?: RecommendationUpdateManyWithoutProductInput
    category?: CategoryUpdateOneRequiredWithoutProductInput
  }

  export type ProductUncheckedUpdateWithoutIncludedItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    recommendations?: RecommendationUncheckedUpdateManyWithoutProductInput
  }

  export type ProductCreateWithoutRecommendationsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    includedItems?: IncludedItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutRecommendationsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
    categoryId: number
    includedItems?: IncludedItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutRecommendationsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutRecommendationsInput, ProductUncheckedCreateWithoutRecommendationsInput>
  }

  export type ProductUpsertWithoutRecommendationsInput = {
    update: XOR<ProductUpdateWithoutRecommendationsInput, ProductUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<ProductCreateWithoutRecommendationsInput, ProductUncheckedCreateWithoutRecommendationsInput>
  }

  export type ProductUpdateWithoutRecommendationsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    includedItems?: IncludedItemUpdateManyWithoutProductInput
    category?: CategoryUpdateOneRequiredWithoutProductInput
  }

  export type ProductUncheckedUpdateWithoutRecommendationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
    includedItems?: IncludedItemUncheckedUpdateManyWithoutProductInput
  }

  export type RecommendationCreateManyProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    imageMobile: string
    imageTablet: string
    imageDesktop: string
    slug: string
  }

  export type IncludedItemCreateManyProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    quantity: number
  }

  export type RecommendationUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    imageMobile?: StringFieldUpdateOperationsInput | string
    imageTablet?: StringFieldUpdateOperationsInput | string
    imageDesktop?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    imageMobile?: StringFieldUpdateOperationsInput | string
    imageTablet?: StringFieldUpdateOperationsInput | string
    imageDesktop?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type RecommendationUncheckedUpdateManyWithoutRecommendationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    imageMobile?: StringFieldUpdateOperationsInput | string
    imageTablet?: StringFieldUpdateOperationsInput | string
    imageDesktop?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type IncludedItemUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type IncludedItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type IncludedItemUncheckedUpdateManyWithoutIncludedItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateManyCategoryInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    cartName: string
    description: string
    features: string
    cartImage: string
    galleryImageMobile1: string
    galleryImageMobile2: string
    galleryImageMobile3: string
    galleryImageTablet1: string
    galleryImageTablet2: string
    galleryImageTablet3: string
    galleryImageDesktop1: string
    galleryImageDesktop2: string
    galleryImageDesktop3: string
    mainImageMobile: string
    mainImageTablet: string
    mainImageDesktop: string
    price: number
    slug: string
    new?: boolean
  }

  export type ProductUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    recommendations?: RecommendationUpdateManyWithoutProductInput
    includedItems?: IncludedItemUpdateManyWithoutProductInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
    recommendations?: RecommendationUncheckedUpdateManyWithoutProductInput
    includedItems?: IncludedItemUncheckedUpdateManyWithoutProductInput
  }

  export type ProductUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    cartName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    features?: StringFieldUpdateOperationsInput | string
    cartImage?: StringFieldUpdateOperationsInput | string
    galleryImageMobile1?: StringFieldUpdateOperationsInput | string
    galleryImageMobile2?: StringFieldUpdateOperationsInput | string
    galleryImageMobile3?: StringFieldUpdateOperationsInput | string
    galleryImageTablet1?: StringFieldUpdateOperationsInput | string
    galleryImageTablet2?: StringFieldUpdateOperationsInput | string
    galleryImageTablet3?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop1?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop2?: StringFieldUpdateOperationsInput | string
    galleryImageDesktop3?: StringFieldUpdateOperationsInput | string
    mainImageMobile?: StringFieldUpdateOperationsInput | string
    mainImageTablet?: StringFieldUpdateOperationsInput | string
    mainImageDesktop?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    new?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}